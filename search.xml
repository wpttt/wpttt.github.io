<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>pip2&amp;pip3共存</title>
    <url>/2020/04/15/pip2-pip3%E5%85%B1%E5%AD%98/</url>
    <content><![CDATA[<p>以下配置以windows系统为例</p>
<h1 id="python2、python3安装及环境变量配置"><a href="#python2、python3安装及环境变量配置" class="headerlink" title="python2、python3安装及环境变量配置"></a>python2、python3安装及环境变量配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>略</p>
<a id="more"></a>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>安装python2、python3后添加如下路径至系统变量path(以python2.7和python3.6为例)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Program Files\Python36</span><br><span class="line">C:\Program Files\Python36\Scripts</span><br><span class="line">C:\Program Files\Python27</span><br><span class="line">C:\Program Files\Python27\Scripts</span><br></pre></td></tr></table></figure>
<h2 id="修改python可执行文件名"><a href="#修改python可执行文件名" class="headerlink" title="修改python可执行文件名"></a>修改python可执行文件名</h2><p>找到python2和python3的安装目录，修改python2.7.9和python3.6.8中python.exe和pythonw.exe的名称为python2.exe、pythonw2.exe和python3.exe、pythonw3.exe</p>
<h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><p>然后再cmd命令行输入<code>python2</code>、<code>python3</code>测试运行情况，确保python2和python3可正常启动</p>
<h1 id="pip2和pip3设置"><a href="#pip2和pip3设置" class="headerlink" title="pip2和pip3设置"></a>pip2和pip3设置</h1><p>Python 安装包需要用到包管理工具pip，但是当同时安装python2和python3的时候，pip只是其中一个版本，以下将提供一个修改方式，即重新安装两个版本的pip，使得两个python版本的pip能够共存。</p>
<p>在DOS命令框输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure>
<p>显示重新安装成功。</p>
<p>或者在DOS命令框输入命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure>
<p>显示重新安装成功。</p>
<p>现在可以通过<code>pip2 -V</code> 和 <code>pip3 -V</code> 查看两个版本的pip信息，以后只需运行<code>pip2 install XXX</code>和<code>pip3 install XXX</code>即可安装各自的python包</p>
<p>至此，pip2和pip3 修改成功。</p>
<h1 id="pip故障无法运行时"><a href="#pip故障无法运行时" class="headerlink" title="pip故障无法运行时"></a>pip故障无法运行时</h1><p>今天遇到pip运行报错的问题</p>
<p>Python报错:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AttributeError: module &#39;importlib._bootstrap&#39; has no attribute &#39;SourceFileLoader</span><br></pre></td></tr></table></figure>
<p>解决方案：</p>
<p>cmd运行以下命令之一</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 -m ensurepip --upgrade</span><br><span class="line">python3 -m ensurepip --upgrade</span><br></pre></td></tr></table></figure>
<p>可以重新安装pip</p>
<p>按说以上两条安装命令会发生冲突，同时只能存在一个pip版本，可按照上文中pip2、pip3共存方案进行共存设置，即运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python2 -m pip install --upgrade pip --force-reinstall</span><br></pre></td></tr></table></figure>
<p>可同时安装更新python2及python3可用的pip版本。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>在psxy中使用cpt填色</title>
    <url>/2020/04/15/%E5%9C%A8psxy%E4%B8%AD%E4%BD%BF%E7%94%A8cpt%E5%A1%AB%E8%89%B2/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>绘制震中分布图是经常需要绘制多年地震，并需要将不同年份地震进行区分，而区分的方式往往是给起填充不同的颜色。常规的绘图方法中将每一年的地震目录用awk提出后再绘制，此方法绘图时，每年的地震需要单独一条命令进行绘制，并给其一个单独的颜色。</p>
<a id="more"></a>

<p>But，<code>—C&lt;cpt&gt;</code>模块为我们提供了使用cpt文件给图中元素进行填色的功能，如此一来，做好数据表则可一条命令进行绘图，并以ColorBar作为图例。</p>
<h1 id="psxy模块下-C选项简介"><a href="#psxy模块下-C选项简介" class="headerlink" title="psxy模块下-C选项简介"></a>psxy模块下-C选项简介</h1><p>在<code>psxy</code>模块中<code>—C&lt;cpt&gt;</code>选项用于指定CPT文件或颜色列表。该选项后跟一个CPT 文件名，也可以使用-C<color1>,<color2>,… 语法在<br>命令行上临时构建一个颜色列表，其中<color1> 对应Z 值为0 的颜色，<color2><br>对应Z 值为1 的颜色，依次类推。</p>
<ol>
<li><strong>若绘制符号（即使用<code>-S</code>选项），则符号的填充色由数据的第三列 Z 值决定，其<br>他数据列依次后移一列</strong></li>
<li><strong>若绘制线段或多边形（即未使用<code>-S</code>选项），则需要在多段数据的头段中指定<br><code>-Z&lt;val&gt;</code>，然后从cpt文件中查找<code>&lt;val&gt;</code>所对应的颜色，以控制线段或多边<br>形的线条颜色</strong></li>
</ol>
<p>下面的例子展示了<code>-C&lt;color1&gt;,&lt;color2&gt;..</code>用法:<br>绘制两条不同颜色的线段</p>
<pre><code>gmt psxy -JX10c/10c -R0/10/0/10 -B1 -Cblue,red -W2p &gt; test.ps &lt;&lt; EOF
&gt; -Z0
1 1
2 2
&gt; -Z1
3 3
4 4
EOF</code></pre><p><img src="https://wpttt.github.io/images/psxy1.png" alt="图1"></p>
<h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1><p>上例为GMT6-documentation中的例子</p>
<p>以下为自己的栗子：</p>
<h2 id="绘制2008年以来全球7级以上地震震中分布图"><a href="#绘制2008年以来全球7级以上地震震中分布图" class="headerlink" title="绘制2008年以来全球7级以上地震震中分布图"></a>绘制2008年以来全球7级以上地震震中分布图</h2><p>bash下绘图代码如下</p>
<pre><code>#!/bin/bash
# GMT v6.0.0
# 提取每一列数据
awk &apos;{if (substr($0,2,4)&gt;=2008) print substr($0,1,15),substr($0,16,6),substr($0,22,7),substr($0,29,4),substr($0,33,3),substr($0,36,3)}&apos; Ms7.EQT &gt; 2018ms7
# 将数据逐年提取为：“经度 纬度 年度 震级”格式
# 下面为for循环下的实现

for i = ((i=2008;i&lt;=2019;i++));
do
awk &apos;{if (substr($1,1,4)==&quot;&apos;$i&apos;&quot;) print $3,$2,&quot;&apos;$i&apos;&quot;,$4}&apos; 2018ms7 &gt;&gt; eqdis    
done


gmt set FONT 11p,4
gmt set MAP_FRAME_TYPE plain
gmt set MAP_FRAME_PEN 1p,black

# 创建cpt文件
gmt makecpt -Crainbow -T2008/2019/1 &gt; cpt.cpt
# 绘图
gmt pscoast -JN6i -R-30/330/-90/90 -Bx60f30 -By30 -Dc -A10000 -Gwhite -Sskyblue -K &gt; eq7dist.ps
awk &apos;{print $1,$2,$3,$4*0.04}&apos; eqdis |gmt psxy -J -R -Sc -W.1p,white -Ccpt.cpt -K -O &gt;&gt; eq7dist.ps
# 绘制colorbar
gmt psscale -Ccpt.cpt -Dx0/0+w5.6i/.2c+jBL+h+o.3c/-1c -Bx1 -By+l&quot;Years&quot; -K -O &gt;&gt; eq7dist.ps
gmt psxy -J -R -T -O &gt;&gt; eq7dist.ps
# 转换至位图
gmt psconvert eq7dist.ps -A -Tj -E300 -P

rm *.cpt gmt.* eqdis</code></pre><p>结果如下</p>
<p><img src="https://wpttt.github.io/images/psxy2.png" alt="图2"></p>
<p>地震目录格式如下：</p>
<pre><code># txt文本
20181211102630-58.32 -26.387.00150000 南桑威奇群岛地区
20181201012927 61.33-150.057.30 40000 美国阿拉斯加
20181205121806-21.85 169.407.50 10000 洛亚蒂群岛
20181211102630-58.32 -26.387.00150000 南桑威奇群岛地区
20190222181720 -2.17 -76.877.50140000 厄瓜多尔
20190301165041-14.55 -70.107.00260000 秘鲁
20190507051936 -6.95 146.507.10130000 巴布亚新几内亚
20190514205828 -4.17 152.487.60 30000 新不列颠岛地区</code></pre><p>因此在绘图之前需要对文本格式进行一定的处理，以满足gmt绘图需要。</p>
<ol>
<li><p>本例子利用for循环加awk实现文本内容的提取和格式的设定，即</p>
<pre><code>经度 纬度 Z值(年份) 震级(大小)</code></pre></li>
<li><p><code>makecpt</code>模块将cpt文件rainbow的Z值设置为2008～2019，并且划分间隔为1，生成新的cpt文件；</p>
</li>
<li><p>因此绘图时使用-C选项，会直接读取第三列为填充颜色；并可以用一条命令绘制colorbar来作为图例，省去了原来繁琐的图例绘制。</p>
</li>
</ol>
<h2 id="绘制颜色变化的曲线"><a href="#绘制颜色变化的曲线" class="headerlink" title="绘制颜色变化的曲线"></a>绘制颜色变化的曲线</h2><p>想要绘制一条颜色变化的线段，下面是演示代码：</p>
<p>此例引自<a href="https://blog.seisman.info/plot-lines-with-gradient-colors/" target="_blank" rel="noopener">Seisman播客</a></p>
<pre><code>#!/bin/bash
# GMT v5.2.1
gmt makecpt -Crainbow -T-2/2/1 &gt; lines.cpt
gmt psxy -JX15c/4c -R0/6/0/4 -B1 -Clines.cpt -W2p &gt; test.ps &lt;&lt; EOF
&gt; -Z-1.5
1 2
2 2
&gt; -Z-0.5
2 2
3 2
&gt; -Z0.5
3 2
4 2
&gt; -Z1.5
4 2
5 2
EOF</code></pre><p>绘图效果如下图：</p>
<p><img src="https://wpttt.github.io/images/psxy3.png" alt="图3"></p>
<p>简单解释一下：</p>
<ol>
<li><code>makecpt</code> 命令制作了一个 - 2 到 2 间隔为 1 的 CPT 文件</li>
<li><code>psxy</code> 命令中使用了 <code>-C</code> 选项，此时需要输入数据是多段表数据，且每段数据的段头记录中，需要有 <code>-Z&lt;val&gt;</code> 以指定每段数据的 Z 值</li>
<li>实际绘图时，对于每段数据，命令会读取该数据数据的段头记录中的 <code>-Z&lt;val&gt;</code> 中的 Z 值，然后到 CPT 文件中查找 Z 值所对应的颜色，作为该段线段的颜色</li>
</ol>
]]></content>
      <categories>
        <category>GMT</category>
      </categories>
      <tags>
        <tag>GMT</tag>
      </tags>
  </entry>
  <entry>
    <title>绘制事件的时间分布图</title>
    <url>/2020/04/15/%E7%BB%98%E5%88%B6%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%97%B6%E9%97%B4%E5%88%86%E5%B8%83%E5%9B%BE/</url>
    <content><![CDATA[<p><img src="https://wpttt.github.io/images/plot-time1.png" alt="fig1"></p>
<a id="more"></a>
<h1 id="绘制M-t图"><a href="#绘制M-t图" class="headerlink" title="绘制M-t图"></a>绘制<em>M</em>-t图</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在python中，利用matplotlib.pyplot.stem可以画茎叶图，stem的参数可以改变垂直线的类型，顶点的颜色大小等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">stem(x,y, linefmt=<span class="literal">None</span>, markerfmt=<span class="literal">None</span>, basefmt=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li><code>x</code>, <code>y</code>分别是横纵坐标；</li>
<li><code>linefmt</code>:垂直线的颜色和类型；<code>linefmt=‘r-’</code>，代表红色的实线;</li>
<li><code>basefmt</code>指<code>y=0</code>那条直线；</li>
<li><code>markerfmt</code>设置顶点的类型和颜色，比如<code>C3.</code>，<code>C</code>(大写字母C)是默认的，后面数字应该是<code>0-9</code>，改变颜色，最后的<code>.</code>或者<code>o</code>（小写字母o）分别可以设置顶点为小实点或者大实点，空格表示没有顶点。</li>
</ul>
<p><strong>以下为线型对应的字符</strong></p>
<center>

<table>
<thead>
<tr>
<th>字符</th>
<th>线型</th>
</tr>
</thead>
<tbody><tr>
<td>‘-‘</td>
<td>solid line</td>
</tr>
<tr>
<td>‘–’</td>
<td>dashed line</td>
</tr>
<tr>
<td>‘-.’</td>
<td>dash-dot line</td>
</tr>
<tr>
<td>‘:’</td>
<td>dotted line</td>
</tr>
</tbody></table>
</center>

<h1 id="绘制N-t图"><a href="#绘制N-t图" class="headerlink" title="绘制N-t图"></a>绘制N-t图</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>python中可以利用<code>matplotlib.pyplot.bar</code>，通过绘制bar实现地震频度图的绘制。<br>工具：</p>
<ul>
<li><code>matplotlib.pyplot</code></li>
<li><code>matplotlib.dates</code></li>
<li><code>pandas</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.bar(x,height,width=<span class="number">0.8</span>,bottom=<span class="literal">None</span>,align=<span class="string">'center'</span>,data=Nonecolor=<span class="string">'b'</span>,alpha=<span class="number">1.</span>..)</span><br></pre></td></tr></table></figure>

<h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a><strong>参数说明</strong></h3><p><strong>xerr, yerr</strong>:<br>scalar or array-like of shape(N,) or shape(2, N), optional；If not <em>None</em>, add horizontal / vertical errorbars to the bar tips. The values are +/- sizes relative to the data:</p>
<ul>
<li>scalar: symmetric +/- values for all bars</li>
<li>shape(N,): symmetric +/- values for each bar</li>
<li>shape(2, N): Separate - and + values for each bar. First row contains the lower errors, the second row contains the upper<br>errors.</li>
<li><em>None</em>: No errorbar. (Default)</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><blockquote>
<p><strong>Notice!</strong><br>本节最关键的问题在于地震数目的统计，和时间坐标的控制</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.dates <span class="keyword">as</span> mdate</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># macos下解决中文乱码</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Arial Unicode MS'</span>]</span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">mc = <span class="number">3</span>  <span class="comment"># 设置最小震级</span></span><br><span class="line"><span class="comment"># 读入目录为DataFrame</span></span><br><span class="line">eq = pd.read_csv(<span class="string">'gsty.txt'</span>,sep=<span class="string">' '</span>,</span><br><span class="line">                 encoding=<span class="string">'gbk'</span>,skipinitialspace=<span class="literal">True</span>,</span><br><span class="line">                 names=[<span class="string">'date'</span>,<span class="string">'time'</span>,<span class="string">'lat'</span>,<span class="string">'lon'</span>,<span class="string">'dep'</span>,<span class="string">'mag'</span>,<span class="string">'diming'</span>])</span><br><span class="line">eq[<span class="string">'datetime'</span>] = eq.apply(<span class="keyword">lambda</span> x: x.date+<span class="string">' '</span>+x.time, axis=<span class="number">1</span>)</span><br><span class="line">eq[<span class="string">'datetime_f'</span>] = pd.to_datetime(eq[<span class="string">'datetime'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图片布局</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>,<span class="number">5</span>),dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用stem绘制M-t图</span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>)</span><br><span class="line">x = eq[eq.mag&gt;=mc].datetime_f</span><br><span class="line">y = eq[eq.mag&gt;=mc].mag</span><br><span class="line">ax1.stem(x,y,linefmt=<span class="string">'k-'</span>, basefmt=<span class="string">'r-'</span>, markerfmt=<span class="string">'C2 '</span>,label=<span class="string">'地震'</span>)</span><br><span class="line">plt.ylim(mc<span class="number">-1</span>,eq.mag.max()+<span class="number">1</span>)</span><br><span class="line">plt.ylabel(<span class="string">'震级(Ml)'</span>)</span><br><span class="line">plt.gcf().autofmt_xdate()</span><br><span class="line">plt.xlabel(<span class="string">"时间"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制频度图前的准备</span></span><br><span class="line"><span class="comment"># 将时间设置为index，便于按时间段进行数量统计</span></span><br><span class="line">eq.set_index(<span class="string">'datetime_f'</span>,inplace=<span class="literal">True</span>,drop=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># eq_p = eq.to_period('M') # 按月显示</span></span><br><span class="line"><span class="comment"># print(eq_p.index.asfreq('M'))</span></span><br><span class="line">afreq = eq.mag.resample(<span class="string">'A'</span>).count()  <span class="comment"># 按年统计</span></span><br><span class="line">mfreq = eq.mag.resample(<span class="string">'M'</span>).count()  <span class="comment"># 按月统计</span></span><br><span class="line">dfreq = eq.resample(<span class="string">'d'</span>).count().to_period(<span class="string">'d'</span>)  <span class="comment"># 按天统计</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用bar绘制频度图</span></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">212</span>)</span><br><span class="line">x = dfreq.index.start_time</span><br><span class="line">y = dfreq.mag</span><br><span class="line"><span class="comment">#设置x轴为时间格式，这句非常重要，否则x轴显示的将是类似于‘736268’这样的转码后的数格式</span></span><br><span class="line">ax2.xaxis.set_major_formatter(mdate.DateFormatter(<span class="string">'%Y-%m-%d'</span>))</span><br><span class="line">plt.xticks(pd.date_range(dfreq.index[<span class="number">0</span>].start_time,dfreq.index[<span class="number">-1</span>]end_time,freq=<span class="string">'10d'</span>), rotation=<span class="number">45</span>)</span><br><span class="line">ax2.bar(x,y,color=<span class="string">'c'</span>,align=<span class="string">'edge'</span>,alpha=<span class="number">0.8</span>)</span><br><span class="line">plt.ylabel(<span class="string">'频数'</span>)</span><br><span class="line">plt.xlabel(<span class="string">"时间"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>运行以上代码生成如下图片</p>
<p><img src="https://wpttt.github.io/images/plot-time1.png" alt="fig1"></p>
<h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p>以下为在时间坐标下绘制数据时的关键顺序</p>
<ol>
<li>读取数据后，利用pd.set_index设置时间列为index</li>
<li>利用时间index对表数据进行统计<code>eq.resample(&#39;d&#39;).count().toperiod(&#39;d&#39;)</code>，此处d表示按天采样，获取每日地震数量。  </li>
</ol>
<p><strong><font color=deepskyblue>注意：此时生成的dataframe中index为时间段，不可直接用于时间坐标（时间坐标用时间点）</font></strong><br>3. 设置x轴时间格式，<code>ax.xaxis.set_major_formatter(mdate.DateFormatter(&#39;%Y-%m-%d&#39;))</code><br>4. 对index时间段取start_time作为时间点，利用始末时间点生成时间序列，作为x轴坐标；<code>pd.date_range</code><br>5. 绘图</p>
<blockquote>
<p><strong><font color=deepskyblue>Notice:</font></strong><br>可选参数<em>color</em>， <em>edgecolor</em>， <em>linewidth</em>，<em>xerr</em>和<em>yerr</em>可以是标量或长度等于bar数目的序列。这是绘制条形图作为堆叠条形图或烛台图的基础。:wstar:<br>详细信息：<em>xerr</em>和<em>yerr</em>被直接传递到:meth:’errorbar’，所以他们也可以有形状2xN,独立规定上下误差。</p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Matplotlib</tag>
        <tag>M-t图</tag>
        <tag>N-t图</tag>
        <tag>时间坐标</tag>
      </tags>
  </entry>
</search>
